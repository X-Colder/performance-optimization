    每次发现系统变慢时，我们通常第一件事是使用top或uptime命令来了解系统负载情况，如下面：

::

$ uptime
02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88


但是我想问的是这里面的每一列的含义你都了解吗？

如果不是很熟悉的话我们一起来了解下

::

02:34:03              // 当前时间
up 2 days, 20:14      // 系统运行时间
1 user                // 正在登录用户数

而最后的三个数字依次是过去1分钟、5分钟、15分钟的平均负载（Load Average）

    平均负载：这里的平均负载可不是单位时间内CPU的使用率，我们可以使用man uptime指令来了解下平均负载的详细解释
简单的讲，平均负载就是在单位时间内，系统处于可运行状态和不可中断状态下的平均进程数，也就是平均活跃进程数，它和CPU使用率并没有直接关系。

    再来了解下可运行状态和不可中断状态：
    可运行状态：指正在使用CPU或者正在等待CPU的进程，也就是我们可以通过ps指令看到的处于R状态（Running或Runnable）的进程
    不可中断状态：正处于内核态关键流程中的进程，并且这些进程是不可打断的，比如最常见的是等待硬件设备的I/O响应，也就是我们在ps指令中看到的D状态（Uninterruptible Sleep，也称为Disk Sleep）的进程。比如，当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是不能被其他进程或中断打断的，这个时候的进程就处于不可中断状态。如果这个时候的进程被打断了，就容易出现磁盘数据与进程数据不一致的问题。
    所以，不可中断状态实际上就是一种系统对进程和硬件设备的保护机制。

    因此，平均负载你就可以简单理解为单位时间内的平均活跃进程数。但实际上是活跃进程数的指数衰减平均值。这个“指数衰减平均”的含义只是系统的一种更快速的计算方式，也不用太过计较，你就把它直接当成活跃进程数的平均值也没问题。

    既然平均的是活跃进程数，那么理想情况下没个CPU上都刚好运行着一个进程，这样没个CPU都得到了充分的利用。比如当平均负载为2时，这意味着什么呢？
    1、在只有2个CPU的系统上，意味着所有的CPU都刚好被占用。
    2、在4个CPU的系统上，意味着CPU有50%是空闲着的。
    3、在只有一个CPU的系统上，则意味着有一半的进程竞争不到CPU。

    那么平均负载为多少时比较合理呢？
    我们知道，平均负载最理想的情况是等于CPU的个数，所以在评价平均负载时，首先得知道系统有几个CPU，我们可以通过top指令或者查看/proc/cpuinfo文件，如：

::

# 关于 grep 和 wc 的用法请查询它们的手册或者网络搜索
$ grep 'model name' /proc/cpuinfo | wc -l
2

    但是，uptime输出的平均负载数据有三个，应该选择哪一个进行比较呢？
    实际上，三个数据是都需要参考的。三个不同时间间隔的平均值，其实是给我们提供了分析系统负载趋势的数据来源，让我们更全面、立体地理解系统的负载状况。
    1、如果1分钟、5分钟、15分钟的数据基本相同或者差别不大，那就说明系统负载比较平稳。当然可能负载过大或较小，但波动是很小的。
    2、如果1分钟的数据远小于15分钟的数据，说明系统在最近1分钟的负载较小，过去15分钟的负载很大，而且从过去15分钟到当前逐渐减小。
    3、反过来，如果1分钟的数据远大于15分钟的数据，则说明最近1份钟的负载很大，较过去15分钟的负载是在逐渐增加。这种情况可能是临时的，就需要持续的观察。

    那么在生产环境中，平均负载多高时需要引起注意呢？
    我们一般认为平均负载高于CPU数量的70%就应该分析排插负载高的问题了。一旦长时间处于高负载情况下就可能导致进程响应变慢，影响服务的正常功能；而且也会因为突然的波动导致服务崩溃。
    当然70%这个数字也不是绝对的，最推荐的方法是把平均负载监控起来，根据更多的历史数据来分析判断。当负载有明显升高趋势时再做分析排查。

    平均负载和CPU使用率
    在实际工作中，我们经常会混淆这两个概念。其实根据之前平均负载的定义就可以发现其实两者并不一样。平均负载时指单位时间内处于可运行状态和不可中断状态的进程数，所以它不仅包含正在使用CPU的进程，还包括正在等待CPU和等待I/O的进程。而CPU使用率是单位时间内CPU繁忙情况的统计，跟平均负载并不一定完全对应。比如：
    1、CPU密集型进程，使用大量CPU会导致平均负载升高，此时两者是一致的；
    2、I/O密集型进程，等待I/O也会导致平均负载升高，但CPU使用率不一定很高；
    3、大量等待CPU的进程调度也会导致平均负载升高，此时的CPU使用率也会升高

    平均负载案例分析

    准备：stress和systat
    stress是一个Linux系统压力测试的工具，可以用它来模拟异常进程使平均负载升高的场景。sysstat包含了常用的Linux性能工具，用来分析和监控系统的性能。我们的案例中会用到这个包里面的两个指令mpstat和pidstat。
    1、mpstat是一个常用的多核CPU性能分析工具，用来实时查看没个CPU的性能指标，以及所有CPU的平均指标。
    2、pidstat是常用的进程性能分析工具，用来实时查看进程的CPU、内存、I/O以及上下文切换等性能指标。

    首先，记录下初始状态下的负载情况：

::

$ uptime
...,  load average: 0.11, 0.15, 0.09

    场景一：CPU密集型进程
    首先，我们模拟一个CPU使用率100%的场景：

::

$ stress --cpu 1 --timeout 600

    然后使用uptime查看平均负载的变化情况：

::

# -d 参数表示高亮显示变化的区域
$ watch -d uptime
...,  load average: 1.00, 0.75, 0.39

    最后，使用mpstat查看CPU使用率的变化情况：

::

# -P ALL 表示监控所有 CPU，后面数字 5 表示间隔 5 秒后输出一组数据
$ mpstat -P ALL 5
Linux 4.15.0 (ubuntu) 09/22/18 _x86_64_ (2 CPU)
13:30:06     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
13:30:11     all   50.05    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00   49.95
13:30:11       0    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
13:30:11       1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00

    从uptime的输出可以看到1分钟的平均负载慢慢增加到了1.00，而mpstat的输出可以发现也刚好有一个CPU的使用率100%；而此时它的iowait为0，这说明平均负载的升高正是由于使用率100%造成的。
    那么到底是哪个进程导致的CPU使用率100%呢，这时可以使用pidstat查看：

::

# 间隔 5 秒后输出一组数据
$ pidstat -u 5 1
13:37:07      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
13:37:12        0      2962  100.00    0.00    0.00    0.00  100.00     1  stress

    从这里可以明显的看到stress进程的CPU使用率为100%。

    场景二：I/O密集型进程


